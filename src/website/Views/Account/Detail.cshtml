@{
  ViewBag.Title = "Account Details :: " + ViewBag.Account.Name;
  ViewBag.NgApp = "sarDatabase";
  ViewBag.NgController = "AccountDetailCtrl";
  ViewBag.NgModules = new List<string> { "treeView" };
}
@section header {
  <h1>Account Detail for @ViewBag.Account.Name</h1>
}
<div class="row">
  <div class="col-md-6">
    <div class="box box-primary">
      <div class="box-header with-border">
        <h3 class="box-title">Database Login Account</h3>
      </div>
      <div class="box-body">
        <ul class="clearfix ng-cloak">
          <li>Email {{account.email ? account.email : 'no email'}} <status-glyph test="account.email"></status-glyph></li>
          <li>Is approved <status-glyph test="account.approved"></status-glyph></li>
          <li>
            Is not locked <status-glyph test="!account.locked"></status-glyph>
          </li>
          <li>Last active {{options.usePreciseDates ? 'on ' + account.lastActive.format() : account.lastActive.fromNow()}}</li>
          <li>Password changed {{options.usePreciseDates ? 'on ' + account.lastPassword.format() : account.lastPassword.fromNow()}}</li>
        </ul>
      </div>
      <div ng-if="canEdit" class="box-footer box-action-footer">
        <div ng-if="canAdmin" class="col-xs-4 ng-cloak">
          <button class="btn" ng-if="!account.locked" ng-click="setAccountApproved(!account.approved)" ng-disabled="disableLockButton">{{account.approved ? 'Disable' : 'Enable'}} Account</button>
          <button class="btn" ng-if="account.locked" ng-click="unlockAccount()" ng-disabled="disableLockButton">Unlock Account</button>
        </div>
        <div ng-class="canAdmin ? 'col-xs-4' : 'col-xs-6'">
          <button class="btn" ng-click="editEmail()">Change Email</button>
        </div>
        <div ng-class="canAdmin ? 'col-xs-4' : 'col-xs-6'">
          <button class="btn" ng-click="changePassword()">Set Password</button>
        </div>
      </div>
    </div>
    <div class="box box-primary">
      <div class="box-header with-border">
        <h3 class="box-title">Linked KCSARA Member</h3>
      </div>
      <div class="box-body">
        <div ng-if="account.linkedMember.loading">Loading ...</div>
        <div ng-if="account.linkedMember.loaded">
          <div ng-if="!account.linkedMember.id">Not linked to member.</div>
          <ul ng-if="account.linkedMember.id" class="clearfix ng-cloak">
            <li>Member name {{account.linkedMember.name}}</li>
            <li>DEM# {{account.linkedMember.dem}}</li>
            <li>
              Active Units <status-glyph test="account.linkedMember.units.length"></status-glyph>
              <ul>
                <li ng-repeat="u in account.linkedMember.units">{{u.Name}}</li>
              </ul>
            </li>
          </ul>
        </div>
      </div>
      <div ng-if="canAdmin || account.linkedMember.id" class="box-footer box-action-footer">
        <div class="col-xs-12">
          <a ng-if="account.linkedMember.id" class="btn" ng-href="{{window.appRoot + '/Members/Detail/' + account.linkedMember.id}}">View Details Page</a>
          <button ng-if="canAdmin && !account.linkedMember.id" class="btn" ng-click="linkMember()">Link Member</button>
        </div>
      </div>
    </div>
  </div>
  <div class="col-md-6">
    <div class="box box-primary">
      <div class="box-header with-border">
        <h3 class="box-title">Database Group Membership</h3>
      </div>
      <div class="box-body">
        <div data-angular-treeview="true" data-tree-model="account.groups" data-node-label="name" data-node-children="groups" data-can-edit="canAdmin" data-on-selected="onGroupSelected" data-on-remove="onGroupRemove"></div>
      </div>
      <div ng-if="canAdmin || canManageGroups()" class="box-footer box-action-footer">
        <div class="col-xs-6"><button class="btn" ng-disabled="!getGroupsToRemove().length" ng-click="nyi()">Remove From Groups</button></div>
        <div class="col-xs-6"><button class="btn" ng-click="nyi()">Add To Group</button></div>
      </div>
    </div>
  </div>
</div>
@section scripts {
  <script type="text/ng-template" id="confirmEnableAccount.html">
    <div>{{model.approved ? 'Enable' : 'Disable'}} account {{model.name}}?</div>
    <div ng-if="!model.approved">This user will no longer have access to this site.</div>
  </script>
  <script type="text/ng-template" id="editAccountEmail.html">
    <form name="editEmailForm">
      <div class="form-group inline-form-group" @*ng-class="{ 'has-error': isInvalid(signoutForm, 'date')}"*@>
        <label for="email" class="control-label">Email:</label>
        <input name="email" type="text" ng-model="model.email" class="form-control" />
        @*<div class="help-block" ng-if="isInvalid(signoutForm, 'date')">
            <div ng-if="signoutForm.date.$error.pattern">Must be in form YYYY-MM-DD.</div>
          </div>*@
      </div>
    </form>
  </script>
  <script type="text/ng-template" id="setAccountPassword.html">
    <form name="setPasswordForm">
      <div class="form-group inline-form-group" @*ng-class="{ 'has-error': isInvalid(signoutForm, 'date')}"*@>
        <label for="type" class="control-label"><input type="radio" value="reset" name="type" ng-model="model.type" /> Create Random Password:</label>
        <div>A new password will be generated and emailed to {{model.account.email}}.</div>
      </div>
      <div class="form-group inline-form-group" ng-class="{ 'has-error': isInvalid(setPasswordForm, 'password')}">
        <label for="password" class="control-label"><input type="radio" value="set" ng-model="model.type" /> Specify Password:</label>
        <input name="password" type="text" ng-model="model.password" ng-change="model.type = 'set'"
               ng-validate-password-characters ng-required="model.type == 'set'"
               ng-model-options="{allowInvalid: true}"
               class="form-control" />
        <div class="help-block" ng-if="isInvalid(setPasswordForm, 'password')">
          <div ng-if="setPasswordForm.password.$error.passwordCharacters">Not a strong password.</div>
        </div>
      </div>
    </form>
  </script>
  <script type="text/ng-template" id="linkMember.html">
    <form name="memberForm">
      <p>Select member to link to username <strong>{{model.name}}</strong></p>
      <p>This action cannot be undone.</p>
      <div class="form-group has-warning" ng-class="{'has-warning': model.linkMember && !model.linkMember.units.length, 'has-error': memberForm.memberId.$error.memberNotLinked}">
        <input type="text" name="memberId" style="display:none" ng-model="model.memberId"  member-not-linked-validator />
        <div np-autocomplete="options.searchOptions" ng-model="model.memberId" class="input-group">
          <input type="text" name="q" class="form-control" placeholder="Search Members ..." />
          <span class="input-group-btn">
            <button type="submit" name="search" id="search-btn" class="btn btn-flat"><i class="fa fa-search"></i></button>
          </span>
        </div>
        <div ng-if="memberForm.colorCode.$error.required">...</div>
        <span class="help-block" ng-if="memberForm.memberId.$pending">Checking for existing account ...</span>
        <span class="help-block" ng-if="memberForm.memberId.$error.memberNotLinked"><i class="fa fa-exclamation-circle"></i> User already has a login username.</span>
        <span class="help-block" ng-if="model.linkMember && !model.linkMember.units.length"><i class="fa fa-warning"></i> Not active in any KCSARA units.</span>
      </div>
    </form>
  </script>
  <script type="text/javascript">
    angular.module('sarDatabase').directive('memberNotLinkedValidator', ['AccountService', '$q', function(AccountService, $q) {
      return {
        require : 'ngModel',
        link : function($scope, element, attrs, ngModel) {
          ngModel.$asyncValidators.memberNotLinked = function(memberId) {
            var deferred = $q.defer();
            if (!memberId) { deferred.resolve(false); }
            else { AccountService.getMemberAccount(memberId).then(function(data) {
              if (data) { deferred.reject(); } else { deferred.resolve(); }
            }); }
            return deferred.promise;
          };
        }
      }
    }])
    angular.module('sarDatabase').controller('AccountDetailCtrl', ['$scope', 'AccountService', 'EditModalService',
      function ($scope, AccountService, EditModalService) {
        var accountModel = AccountService.initAccount(@Html.ToJson((object)ViewBag.Account));
        AccountService.rolesIManage = @Html.ToJson((object)ViewBag.RolesIManage);
        $.extend($scope, {
          account: accountModel,
          groups: AccountService.groups,
          canAdmin: @Html.ToJson((object)ViewBag.CanAdmin),
          canEdit: @Html.ToJson((object)ViewBag.CanEdit),
          canManageGroups: function() { return AccountService.rolesIManage.length > 0; },
          disableLockButton: @Html.ToJson(User.Identity.Name) == accountModel.name,
          options: { usePreciseDates: false },
          onGroupSelected: function (node) {
            AccountService.loadMoreGroups(node);
          },
          onGroupRemove: function (node) {
            alert("would confirm then remove account from group");
            return false;
          },
          getGroupsToRemove: function () {
            return $scope.account.groups.filter(function (g) {
              return !!g.remove;
            });
          },
          setAccountApproved: function(newValue) {
            var actionText = (newValue ? 'Enable' : 'Disable');
            EditModalService.edit('confirmEnableAccount.html',
              actionText + ' Account',
              $.extend({}, accountModel, { approved: newValue }),
              AccountService.save,
              {
                saveText: actionText,
                done: function(data) {
                  accountModel.merge(data);
                }
              });
          },
          editEmail: function() {
            EditModalService.edit('editAccountEmail.html',
              'Edit Account Email',
              $.extend({}, accountModel),
              AccountService.save,
              {
                done: function(data) {
                  accountModel.merge(data);
                }
              });
          },
          linkMember: function() {
            var model = $.extend({}, accountModel);
            EditModalService.edit('linkMember.html',
              'Link KCSARA Member',
              model,
              AccountService.save,
              {
                done: function(data) {
                  accountModel.merge(data);
                  AccountService.loadLinkedMember(accountModel.name);
                },
                searchOptions: {
                  url: '@Url.Content("~/api/search/")',
                  searchParam: 'q',
                  itemTemplateUrl: 'searchResult.html',
                  listClass: 'list-group search-results',
                  params: {'t': 'Member'},
                  limit: 8,
                  nameAttr: 'summary.name',
                  valueAttr: 'summary.id',
                  onSelect: function (item) {
                    model.linkMember = item.summary; },
                  onDeselect: function() {
                    delete model.linkMember; }
                },
              });
          },
          changePassword: function() {
            EditModalService.edit('setAccountPassword.html',
              'Change Account Password',
              { type: 'reset', value: null, account: accountModel },
              AccountService.setPassword,
              {
                done: function(data) {
                  accountModel.merge(data);
                  BootstrapDialog.show({
                    title: 'Password Reset',
                    message: 'The password for ' + accountModel.name + ' was reset and sent to ' + accountModel.email
                  })
                }
              });
          },
          nyi: function() { alert('Not implemented')}
        });
        AccountService.loadGroups(accountModel.name);
        AccountService.loadLinkedMember(accountModel.name);
      }]);
  </script>
}
@section pageSettings {
  <div class="form-group">
    <label class="control-sidebar-subheading">
      Show Precise Times <input type="checkbox" class="pull-right" ng-model="options.usePreciseDates" />
    </label>
    <p>
      Show dates as exact date and time instead of more readable English.
    </p>
  </div>
}